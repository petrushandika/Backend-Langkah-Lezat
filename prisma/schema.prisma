// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  username  String
  email     String    @unique
  password  String
  roleId    Int?
  role      Role?     @relation(fields: [roleId], references: [id])
  orders    Order[]
  histories History[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Role {
  id    Int      @id @default(autoincrement())
  name  RoleType @unique
  users User[]
}

model Menu {
  id           Int           @id @default(autoincrement())
  name         String
  price        Float
  categoryId   Int
  category     Category      @relation(fields: [categoryId], references: [id])
  orderDetails OrderDetail[]
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String @unique
  menus Menu[]
}

model Order {
  id           Int           @id @default(autoincrement())
  userId       Int
  user         User          @relation(fields: [userId], references: [id])
  totalPrice   Float
  status       OrderStatus   @default(PENDING)
  orderDetails OrderDetail[]
  payments     Payment[]
}

model OrderDetail {
  id       Int   @id @default(autoincrement())
  orderId  Int
  order    Order @relation(fields: [orderId], references: [id])
  menuId   Int
  menu     Menu  @relation(fields: [menuId], references: [id])
  quantity Int
  price    Float // subtotal (quantity x menu.price)
}

model Payment {
  id      Int           @id @default(autoincrement())
  orderId Int
  order   Order         @relation(fields: [orderId], references: [id])
  amount  Float
  method  String
  status  PaymentStatus
}

model History {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  action      String // e.g., "Created Order", "Updated Menu"
  description String
  createdAt   DateTime @default(now())
}

enum RoleType {
  ADMIN
  CASHIER
  CUSTOMER
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELED
}

enum PaymentStatus {
  PAID
  FAILED
  PENDING
}
